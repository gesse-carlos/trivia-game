{"version":3,"sources":["trivia.png","redux/reducers/fetchReducer.js","redux/reducers/scoreReducer.js","redux/reducers/rootReducer.js","redux/store/index.js","redux/actions/fetchActions.js","redux/actions/actionTypes.js","pages/pageFunctions/loginFuncs.js","components/Input.jsx","components/Button.jsx","pages/Login.jsx","components/Home.jsx","components/Header.jsx","redux/actions/saveCurPlayerScore.js","helpers/decodeHTML.js","components/Answers.jsx","components/Question.jsx","pages/Game.jsx","components/componentsFunctions/FeedbackAnswerfuncs.js","components/FeedbackAswers.jsx","components/Reset.jsx","pages/Feedback.jsx","serviceWorker.js","index.js","App.js"],"names":["module","exports","INITIAL_STATE","userToken","isFetching","questions","fetchReducer","state","action","type","payload","score","count","ScoreReducer","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","window","Cypress","getQuestions","fetchActions","dispatch","fetch","then","response","json","token","localStorage","setItem","JSON","stringify","saveTokenOnLocalStorage","getToken","savePlayerDataOnLocalStorage","user","player","name","gravatarEmail","assertions","PropTypes","string","func","Input","props","id","labelText","placeholder","testID","onChange","value","htmlFor","data-testid","Button","category","onClick","text","disabled","className","Login","disable","redirect","handleChange","bind","handleClick","disableAndAbleButton","verifyUserLogin","boolean","this","setState","shoudRedirectBollean","email","test","validateEmail","length","validateUsername","validateLoginFactory","target","saveUserLoginOnState","fetchToken","username","to","src","logo","alt","React","Component","connect","Home","Header","Gravatar","parse","getItem","getPlayerDataFromLocalStorage","hashGerada","md5","toString","imgemPerfil","number","saveScoreOnStore","currScore","decodeHtml","html","txt","document","createElement","innerHTML","answersScore","easy","medium","hard","Answers","correctColor","wrongColor","currentCount","hide","addScoreOnClick","disableButtom","verifyClock","Timer","setTimer","stopTimer","clearIntervalTimer","nextQuestionOnClick","showNextButton","resetTimeNext","callback","prevState","clearInterval","gameTimer","nextQuestion","setInterval","clock","difficulty","scoreValue","Object","keys","find","key","result","getPlayer","console","log","newPlayer","addScoreOnStore","correctAnswer","answers","map","answer","index","e","renderButton","Question","array","renderQuestions","question","correct_answer","incorrect_answers","sort","a","async","results","error","Game","done","lowScore","highScore","renderAnswer","FeedbackAnswers","assertionsFeedback","Reset","fetchResetApi","getitem","Feedback","Boolean","location","hostname","match","ReactDOM","render","exact","path","component","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.af2def00.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trivia.466d153e.png\";","const INITIAL_STATE = {\n  userToken: '',\n  isFetching: false,\n  questions: [],\n};\n\nfunction fetchReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case 'REQUEST_TOKEN':\n    return {\n      ...state,\n      isFetching: true,\n    };\n  case 'GET_TOKEN':\n    return {\n      ...state,\n      userToken: action.userToken,\n      isFetching: false,\n    };\n  case 'SUBMIT_QUESTIONS':\n    return {\n      ...state,\n      questions: action.payload,\n    };\n  case 'ADD_QUESTIONS_ON_STORE':\n    return ({\n      ...state,\n      questions: action.payload,\n    });\n  case 'GET_QUESTIONS':\n    return ({\n      ...state,\n      questions: action.questions,\n    });\n  case 'GET_QUESTIONS_ERROR':\n    return ({\n      ...state,\n    });\n  default:\n    return {\n      ...state,\n    };\n    // break;\n  }\n}\n\nexport default fetchReducer;\n","const INITIAL_STATE = {\n  score: 0,\n  count: 30,\n};\n\nfunction ScoreReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case 'SAVE_SCORE':\n    return ({\n      ...state,\n      score: action.score,\n    });\n  case 'AWAIT':\n    return ({\n      ...state,\n    });\n  case 'ADD_CURRENT_COUNT':\n    return ({\n      ...state,\n      count: action.count,\n    });\n  default:\n    return state;\n  }\n}\n\nexport default ScoreReducer;\n","import { combineReducers } from 'redux';\nimport fetchReducer from './fetchReducer';\nimport ScoreReducer from './scoreReducer';\n\nconst rootReducer = combineReducers({ fetchReducer, ScoreReducer });\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers/rootReducer';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nif (window.Cypress) {\n  window.store = store;\n}\n\nexport default store;\n","import {\n  REQUEST_TOKEN,\n  GET_TOKEN,\n  SET_CATEGORY,\n  SUBMIT_QUESTIONS,\n  ADD_CURRENT_COUNT,\n} from './actionTypes';\n\nconst requestToken = () => ({\n  type: REQUEST_TOKEN,\n});\n\nconst getToken = (token) => ({\n  type: GET_TOKEN,\n  userToken: token,\n});\n\nconst getQuestions = (questions) => ({\n  type: 'GET_QUESTIONS',\n  questions,\n});\n\nconst getQuestionsError = (error) => ({\n  type: 'GET_QUESTIONS_ERROR',\n  error,\n});\n\nconst saveTokenOnLocalStorage = (token) => {\n  localStorage.setItem('token', JSON.stringify(token));\n};\n\nfunction fetchActions() {\n  return (dispatch) => {\n    dispatch(requestToken());\n    fetch('https://opentdb.com/api_token.php?command=request')\n      .then((response) => response.json())\n      .then((response) => response.token)\n      .then((token) => {\n        saveTokenOnLocalStorage(token);\n        dispatch(getToken(token));\n      });\n  };\n}\n\nexport function fetchQuestions(token) {\n  return async (dispatch) => {\n    try {\n      const response = await fetch(`https://opentdb.com/api.php?amount=5&token=${token}`);\n      const questions = await response.json();\n      return dispatch(getQuestions(questions.results));\n    } catch (error) {\n      return dispatch(getQuestionsError(error));\n    }\n  };\n}\n\nexport const setCategory = (category) => ({\n  type: SET_CATEGORY,\n  categoryName: category,\n});\n\nexport const submitQuestions = (payload) => ({\n  type: SUBMIT_QUESTIONS,\n  payload,\n});\n\nexport const categoriesThunk = () => (results) => ({\n  type: 'GET_QUESTIONS',\n  questions: results,\n});\n\nexport const getCurrentCount = (payload) => ({\n  type: ADD_CURRENT_COUNT,\n  count: payload,\n});\n\nconst awaitCount = () => ({\n  type: 'AWAIT',\n});\n\nexport function addCurrentCount(payload) {\n  return (dispatch) => {\n    dispatch(awaitCount());\n    const results = dispatch(getCurrentCount(payload));\n\n    return results;\n  };\n}\n\nexport default fetchActions;\n","export const REQUEST_TOKEN = 'REQUEST_TOKEN';\nexport const GET_TOKEN = 'GET_TOKEN';\nexport const SET_CATEGORY = 'SET_CATEGORY';\nexport const SUBMIT_QUESTIONS = 'SUBMIT_QUESTIONS';\nexport const ADD_QUESTIONS_ON_STORE = 'ADD_QUESTIONS_ON_STORE';\nexport const ADD_CURRENT_COUNT = 'ADD_CURRENT_COUNT';\n","// fetch api functions\nconst saveTokenOnLocalStorage = (token) => {\n  localStorage.setItem('token', token);\n};\n\nexport const fetchTokenApi = async () => {\n  const fetchApi = await fetch('https://opentdb.com/api_token.php?command=request');\n  const jsonFetch = await fetchApi.json();\n  const { token } = await jsonFetch;\n\n  saveTokenOnLocalStorage(token);\n};\n\n// validate login functions\n\nconst validateEmail = (email) => /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);\n\nconst validateUsername = (name) => name.length > 1;\n\nexport const savePlayerDataOnLocalStorage = (state) => {\n  const { name, gravatarEmail, score, assertions } = state;\n  const user = { player: { name, gravatarEmail, score, assertions } };\n  localStorage.setItem('state', JSON.stringify(user));\n};\n\nexport const validateLoginFactory = (email, name) => (\n  validateEmail(email) && validateUsername(name)\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Input(props) {\n  const { type, name, id, labelText, placeholder, testID, onChange, value } = props;\n  return (\n    <label\n      htmlFor={ id }\n    >\n      { labelText }\n      <input\n        type={ type }\n        name={ name }\n        id={ id }\n        placeholder={ placeholder }\n        data-testid={ testID }\n        onChange={ onChange }\n        value={ value }\n      />\n    </label>\n  );\n}\n\nconst { string, func } = PropTypes;\n\nInput.propTypes = {\n  type: string,\n  name: string,\n  id: string,\n  labelText: string,\n  placeholder: string,\n  testID: string,\n  onChange: func,\n  value: string,\n}.isRequired;\n\nexport default Input;\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nfunction Button(props) {\n  const { category, id, onClick, testID, text, disabled, className } = props;\n  return (\n    <button\n      type={ category ? 'button' : 'submit' }\n      id={ id }\n      className={ className }\n      onClick={ onClick }\n      data-testid={ testID }\n      disabled={ disabled }\n    >\n      { text }\n    </button>\n  );\n}\n\nButton.propTypes = {\n  id: PropTypes.string,\n  onClick: PropTypes.func,\n  testID: PropTypes.string,\n  text: PropTypes.string,\n  className: PropTypes.string,\n}.isRequired;\n\nexport default Button;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Redirect } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\n// import { IoIosSettings } from 'react-icons/io';\nimport { BsFillPlayFill } from 'react-icons/bs';\nimport fetchActions from '../redux/actions/fetchActions';\n\nimport {\n  validateLoginFactory,\n  savePlayerDataOnLocalStorage,\n  // fetchTokenApi,\n} from './pageFunctions/loginFuncs';\nimport logo from '../trivia.png';\nimport Input from '../components/Input';\nimport Button from '../components/Button';\n\n// const random = 'random';\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      disable: true,\n      gravatarEmail: '',\n      name: '',\n      score: 0,\n      assertions: 0,\n      redirect: false,\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.disableAndAbleButton = this.disableAndAbleButton.bind(this);\n    this.verifyUserLogin = this.verifyUserLogin.bind(this);\n  }\n\n  disableAndAbleButton(boolean) {\n    return (\n      !boolean ? this.setState({ disable: false }) : this.setState({ disable: true })\n    );\n  }\n\n  verifyUserLogin() {\n    const { name, gravatarEmail } = this.state;\n    const shoudRedirectBollean = !validateLoginFactory(gravatarEmail, name);\n    this.disableAndAbleButton(shoudRedirectBollean);\n  }\n\n  saveUserLoginOnState(name, value) {\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  async handleChange({ target: { name, value } }) {\n    await this.saveUserLoginOnState(name, value);\n    this.verifyUserLogin();\n  }\n\n  handleClick() {\n    const { fetchToken } = this.props;\n    fetchToken();\n    savePlayerDataOnLocalStorage(this.state);\n    this.setState({ redirect: true });\n  }\n\n  render() {\n    const { username, gravatarEmail, disable, redirect } = this.state;\n    if (redirect) return <Redirect to=\"/trivia-game/game\" />;\n    return (\n      <header className=\"App-header\">\n        <img src={ logo } className=\"App-logo\" alt=\"logo\" />\n\n        <form className=\"login-forms\">\n          <Input\n            type=\"text\"\n            name=\"name\"\n            id=\"player-name\"\n            className=\"input-login\"\n            labelText=\"Usuário: \"\n            testID=\"input-player-name\"\n            onChange={ this.handleChange }\n            value={ username }\n          />\n          <Input\n            type=\"email\"\n            name=\"gravatarEmail\"\n            id=\"player-email\"\n            className=\"input-login\"\n            labelText=\"E-mail: \"\n            testID=\"input-gravatar-email\"\n            onChange={ this.handleChange }\n            value={ gravatarEmail }\n          />\n          <Button\n            id=\"login-submit\"\n            className=\"btn btn-success login-submit\"\n            testID=\"btn-play\"\n            text={ <BsFillPlayFill /> }\n            disabled={ disable }\n            onClick={ this.handleClick }\n          />\n          <Link\n            to=\"/trivia-game/settings\"\n            data-testid=\"btn-settings\"\n            id=\"settings-button\"\n          >\n            {/* <Button\n              className=\"btn btn-secondary settings-button\"\n              text={ <IoIosSettings className=\"settings-icon\" /> }\n            /> */}\n          </Link>\n        </form>\n      </header>\n    );\n  }\n}\n\nLogin.propTypes = {\n  fetchToken: PropTypes.func,\n}.isRequired;\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchToken: () => dispatch(fetchActions()),\n});\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { FaHome } from 'react-icons/fa';\nimport Button from './Button';\n\nexport default class Home extends React.Component {\n  render() {\n    return (\n      <Link to=\"/trivia-game\">\n        <Button\n          category=\"button\"\n          id=\"go-home\"\n          data-testid=\"btn-go-home\"\n          text={ <FaHome /> }\n          className=\"btn btn-light\"\n        />\n      </Link>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport md5 from 'crypto-js/md5';\nimport Home from './Home';\n\nclass Header extends Component {\n  constructor(props) {\n    super(props);\n    this.Gravatar = this.Gravatar.bind(this);\n  }\n\n  getPlayerDataFromLocalStorage() {\n    const getPlayerData = JSON.parse(localStorage.getItem('state')).player;\n    return getPlayerData;\n  }\n\n  Gravatar() {\n    const { name, gravatarEmail } = this.getPlayerDataFromLocalStorage();\n\n    const hashGerada = md5(gravatarEmail).toString();\n    const imgemPerfil = `https://www.gravatar.com/avatar/${hashGerada}`;\n    const perfil = { name, imgemPerfil, gravatarEmail };\n\n    return perfil;\n  }\n\n  render() {\n    const { name, imgemPerfil } = this.Gravatar();\n    const { score, testID } = this.props;\n    return (\n      <header className=\"header\">\n        <img\n          src={ imgemPerfil }\n          alt={ name }\n          data-testid=\"header-profile-picture\"\n        />\n        <p data-testid=\"header-player-name\">\n          { name }\n        </p>\n        <h3 data-testid={ testID }>\n          <p data-testid=\"header-score\">{score}</p>\n        </h3>\n        <Home />\n      </header>\n    );\n  }\n}\n\nconst { number, string } = PropTypes;\nHeader.propTypes = {\n  score: number.isRequired,\n  testID: string.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  score: state.ScoreReducer.score,\n});\n\nexport default connect(mapStateToProps)(Header);\n","import {\n  ADD_QUESTIONS_ON_STORE,\n} from './actionTypes';\n\nconst saveScoreOnStore = (currScore) => ({\n  type: 'SAVE_SCORE',\n  score: currScore,\n});\n\nexport const addQuestionsOnStore = (payload) => ({\n  type: ADD_QUESTIONS_ON_STORE,\n  payload,\n});\n\n// function saveScoreOnStore(currScore) {\n//   return (dispatch) => {\n//     dispatch(saveScore(currScore));\n//   };\n// }\n\nexport default saveScoreOnStore;\n","const decodeHtml = (html) => {\n  const txt = document.createElement('textarea');\n  txt.innerHTML = html;\n  return txt.value;\n};\n\nexport default decodeHtml;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport saveScoreOnStore from '../redux/actions/saveCurPlayerScore';\nimport { savePlayerDataOnLocalStorage } from '../pages/pageFunctions/loginFuncs';\nimport decodeHtml from '../helpers/decodeHTML';\n\nimport './Answers.css';\n\nconst answersScore = {\n  easy: 1,\n  medium: 2,\n  hard: 3,\n};\n\nconst defaultColor = 'btn btn-secondary';\n\nclass Answers extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      score: 0,\n      assertions: 0,\n      disable: false,\n      correctColor: defaultColor,\n      wrongColor: defaultColor,\n      currentCount: 30,\n      hide: false,\n    };\n\n    this.addScoreOnClick = this.addScoreOnClick.bind(this);\n    this.disableButtom = this.disableButtom.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.verifyClock = this.verifyClock.bind(this);\n    this.Timer = this.Timer.bind(this);\n    this.setTimer = this.setTimer.bind(this);\n    this.stopTimer = this.stopTimer.bind(this);\n    this.clearIntervalTimer = this.clearIntervalTimer.bind(this);\n    this.nextQuestionOnClick = this.nextQuestionOnClick.bind(this);\n    this.showNextButton = this.showNextButton.bind(this);\n    this.resetTimeNext = this.resetTimeNext.bind(this);\n  }\n\n  componentDidMount() {\n    this.Timer();\n  }\n\n  setTimer(callback) {\n    this.setState((prevState) => ({\n      currentCount: prevState.currentCount - 1,\n    }), callback);\n  }\n\n  clearIntervalTimer() {\n    const { currentCount } = this.state;\n    if (currentCount < 1) {\n      clearInterval(this.gameTimer);\n      this.disableButtom();\n    }\n  }\n\n  nextQuestionOnClick() {\n    const { nextQuestion } = this.props;\n    nextQuestion();\n    this.setState({\n      disable: false,\n      correctColor: defaultColor,\n      wrongColor: defaultColor,\n      hide: false,\n    });\n    this.resetTimeNext();\n  }\n\n  resetTimeNext() {\n    this.setState({\n      currentCount: 30,\n    });\n    this.Timer();\n  }\n\n  stopTimer() {\n    return clearInterval(this.gameTimer);\n  }\n\n  Timer() {\n    const INTERVAL_SECOND = 1000;\n    this.gameTimer = setInterval(() => {\n      this.setTimer(this.clearIntervalTimer);\n    }, INTERVAL_SECOND);\n  }\n\n  disableButtom() {\n    this.setState({\n      disable: true,\n      correctColor: 'btn btn-success',\n      wrongColor: 'btn btn-danger',\n    });\n  }\n\n  verifyClock() {\n    this.disableButtom();\n  }\n\n  addScoreOnClick(clock, difficulty) {\n    const { score } = this.state;\n    const { easy, medium, hard } = answersScore;\n    const difficulties = Object.keys(answersScore).find((key) => key === difficulty);\n    let scoreValue;\n    switch (difficulties) {\n    case 'easy':\n      scoreValue = easy;\n      break;\n    case 'medium':\n      scoreValue = medium;\n      break;\n    case 'hard':\n      scoreValue = hard;\n      break;\n    default:\n      break;\n    }\n    const tenScore = 10;\n    const result = score + (tenScore + (clock * scoreValue));\n    const getPlayer = JSON.parse(localStorage.getItem('state')).player;\n    console.log(getPlayer);\n    this.setState((prevState) => (\n      {\n        score: result,\n        assertions: prevState.assertions + 1,\n      }\n    ), () => {\n      const { assertions } = this.state;\n      const newPlayer = {\n        ...getPlayer,\n        score: result,\n        assertions,\n      };\n      savePlayerDataOnLocalStorage(newPlayer);\n    });\n    const { addScoreOnStore } = this.props;\n    addScoreOnStore(result);\n  }\n\n  showNextButton() {\n    this.setState({\n      hide: true,\n    });\n  }\n\n  handleClick({ target }, correctAnswer, count) {\n    const { difficulty } = this.props;\n    if (target.value === correctAnswer) {\n      this.addScoreOnClick(count, difficulty);\n    }\n    this.stopTimer();\n    this.disableButtom();\n    this.showNextButton();\n  }\n\n  renderButton() {\n    return (\n      <button\n        type=\"button\"\n        data-testid=\"btn-next\"\n        className=\"btn btn-light next-button\"\n        onClick={ () => this.nextQuestionOnClick() }\n      >\n        Próxima\n      </button>\n    );\n  }\n\n  render() {\n    const { answers, correctAnswer } = this.props;\n    const { correctColor, wrongColor, disable, currentCount, hide } = this.state;\n    return (\n      <>\n        <div className=\"answers-container\">\n          {answers.map((answer, index) => (\n            <button\n              type=\"button\"\n              disabled={ disable }\n              key={ answer }\n              value={ answer }\n              data-testid={\n                correctAnswer === answers[index]\n                  ? 'correct-answer' : `wrong-answer-${index}`\n              }\n              onClick={ (e) => this.handleClick(e, correctAnswer, currentCount) }\n              className={\n                `\n              ${correctAnswer === answers[index]\n              ? correctColor : wrongColor} answer-button`\n              }\n              difficulty={ answer.difficulty }\n            >\n              {decodeHtml(answer)}\n            </button>))}\n        </div>\n        { hide ? this.renderButton() : null }\n        <p className=\"current-count\">\n          { currentCount }\n        </p>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  count: state.ScoreReducer.count,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  addScoreOnStore: (payload) => dispatch(saveScoreOnStore(payload)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Answers);\n\nconst { array, string, number } = PropTypes;\n\nAnswers.propTypes = {\n  answers: array,\n  correctAnswer: array,\n  difficulty: string,\n  count: number,\n}.isRequired;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Redirect } from 'react-router';\nimport { connect } from 'react-redux';\nimport { fetchQuestions } from '../redux/actions/fetchActions';\nimport Answers from './Answers';\nimport decodeHtml from '../helpers/decodeHTML';\n\nclass Question extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      id: 0,\n    };\n\n    this.nextQuestion = this.nextQuestion.bind(this);\n    this.renderQuestions = this.renderQuestions.bind(this);\n  }\n\n  componentDidMount() {\n    const { getQuestions, token } = this.props;\n\n    getQuestions(token);\n  }\n\n  nextQuestion() {\n    this.setState((id) => ({\n      id: id.id + 1,\n    }));\n  }\n\n  renderQuestions(question) {\n    const answers = [question.correct_answer, ...question.incorrect_answers];\n    answers.sort();\n    return (\n      <>\n        <p\n          data-testid=\"question-category\"\n          className=\"question-category\"\n        >\n          {question.category}\n        </p>\n        <p\n          data-testid=\"question-text\"\n          className=\"question-text\"\n        >\n          { decodeHtml(question.question) }\n        </p>\n\n        <Answers\n          nextQuestion={ this.nextQuestion }\n          answers={ answers }\n          correctAnswer={ question.correct_answer }\n          difficulty={ question.difficulty }\n        />\n\n      </>\n    );\n  }\n\n  render() {\n    const { questions } = this.props;\n    const { id } = this.state;\n    const questionsLimit = 5;\n    if (questions.length === 0) return <p>Loading...</p>;\n    if (id === questionsLimit) return <Redirect to=\"/trivia-game/feedback\" />;\n    const questionMap = questions.map((question) => this.renderQuestions(question));\n    return (\n      questionMap[id]\n    );\n  }\n}\n\nQuestion.propTypes = {\n  getQuestions: PropTypes.func,\n  questions: PropTypes.shape({\n    length: PropTypes.number,\n    map: PropTypes.func,\n  }),\n  token: PropTypes.string,\n}.isRequired;\n\nconst mapStateToProps = (state) => ({\n  questions: state.fetchReducer.questions,\n  token: state.fetchReducer.userToken,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  getQuestions: (payload) => dispatch(fetchQuestions(payload)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Question);\n","import React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport Header from '../components/Header';\nimport Question from '../components/Question';\nimport './Game.css';\n\nclass Game extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      redirect: false,\n    };\n  }\n\n  render() {\n    const { redirect } = this.state;\n    if (redirect) return <Redirect to=\"/trivia-game/feedback\" />;\n\n    return (\n      <div className=\"game-page\">\n        <Header\n          testID=\"header-score\"\n        />\n        <main className=\"game-container\">\n          <Question />\n        </main>\n      </div>\n\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  questions: state.fetchReducer.questions,\n  done: state.fetchReducer.done,\n});\n\nexport default connect(mapStateToProps)(Game);\n","import React from 'react';\n\nconst answers = {\n  lowScore: {\n    score: 2,\n    answer: 'Podia ser melhor...',\n  },\n  highScore: {\n    score: 3,\n    answer: 'Mandou bem!',\n  },\n};\n\nconst { lowScore, highScore } = answers;\n\nfunction renderAnswer(score = 0) {\n  if (score <= lowScore.score) {\n    return (\n      <p data-testid=\"feedback-text\">{lowScore.answer}</p>\n    );\n  }\n  return (\n    <p data-testid=\"feedback-text\">\n      { highScore.answer }\n    </p>\n  );\n}\n\nexport default renderAnswer;\n","import React from 'react';\nimport renderAnswer from './componentsFunctions/FeedbackAnswerfuncs';\n\nclass FeedbackAnswers extends React.Component {\n  constructor() {\n    super();\n\n    this.assertionsFeedback = this.assertionsFeedback.bind(this);\n  }\n\n  assertionsFeedback(assertions) {\n    return (\n      <p data-testid=\"feedback-total-question\">{assertions}</p>\n    );\n  }\n\n  render() {\n    const { assertions } = JSON.parse(localStorage.getItem('state')).player;\n\n    return (\n      <div>\n        {renderAnswer(assertions)}\n        {this.assertionsFeedback(assertions)}\n      </div>);\n  }\n}\n\nexport default FeedbackAnswers;\n","import React from 'react';\nimport { Redirect } from 'react-router';\nimport { BsArrowRepeat } from 'react-icons/bs';\nimport Button from './Button';\n\nexport default class Reset extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      redirect: false,\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  async handleClick() {\n    const token = localStorage.getItem('token');\n    const fetchResetApi = await fetch(`https://opentdb.com/api_token.php?command=reset&token=${token}`);\n    this.setState({\n      redirect: true,\n    });\n\n    return fetchResetApi;\n  }\n\n  render() {\n    const { redirect } = this.state;\n    if (redirect) return <Redirect to=\"/trivia-game\" />;\n\n    return (\n      <Button\n        category=\"button\"\n        id=\"reset-button\"\n        className=\"btn btn-light reset-button\"\n        testID=\"btn-play-again\"\n        text={ <BsArrowRepeat /> }\n        onClick={ this.handleClick }\n      />\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport Header from '../components/Header';\nimport FeedbackAnswers from '../components/FeedbackAswers';\nimport Reset from '../components/Reset';\nimport Home from '../components/Home';\n\nfunction getitem() {\n  const getItem = localStorage.getItem('score');\n  const parseItem = JSON.parse(getItem);\n  return parseItem;\n}\n\nclass Feedback extends Component {\n  componentDidMount() {\n    getitem();\n  }\n\n  render() {\n    const score = getitem();\n    return (\n      <div>\n        <Header\n          score={ score }\n          testID=\"feedback-total-score\"\n        />\n        <FeedbackAnswers score={ score } />\n        <Home />\n        <Reset />\n      </div>\n    );\n  }\n}\n\nexport default Feedback;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport './App.css';\nimport Login from './pages/Login';\nimport Game from './pages/Game';\n// import Settings from './pages/Settings';\nimport Feedback from './pages/Feedback';\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route exact path=\"/trivia-game\" component={ Login } />\n        {/* <Route path=\"/trivia-game/settings\" component={ Settings } /> */}\n        <Route exact path=\"/trivia-game/feedback\" component={ Feedback } />\n        <Route exact path=\"/trivia-game/game\" component={ Game } />\n      </Switch>\n    </div>\n  );\n}\n"],"sourceRoot":""}